"use strict";async function sendMessageToActiveTab(t){let[a]=await chrome.tabs.query({active:!0,lastFocusedWindow:!0}),e=await chrome.tabs.sendMessage(a.id,t);return e}async function startimport(t,a){let e=chrome.tabs.create({url:t[1]});function s(e,r,i){if(e==i.id&&"complete"==r.status&&i.url===t[1]){chrome.tabs.sendMessage(i.id,{type:"startimport",data:{name:a,arr:t}}),chrome.tabs.onUpdated.removeListener(s);return}}chrome.tabs.onUpdated.addListener(s);let r=await chrome.storage.local.get(["imports"]);void 0==(r=r.imports)?await chrome.storage.local.set({imports:[e.id]}):await chrome.storage.local.set({imports:[...r,e.id]})}chrome.tabs.onUpdated.addListener((t,a,e)=>{}),chrome.tabs.onRemoved.addListener(async t=>{let a=await chrome.storage.local.get(["imports"]);a=a.imports;let e=a.indexOf(t);-1!=e&&(a.splice(e,1),await chrome.storage.local.set({imports:a}))}),chrome.runtime.onMessage.addListener(async(t,a,e)=>{let{type:s,data:r}=t;if("startimport"===s&&startimport(r.arr,r.name),"importdone"===s&&await chrome.tabs.remove(a.tab.id),"stopimport"===s){let i=await chrome.storage.local.get(["imports"]);if(void 0!=(i=i.imports)){for(let o=0;o<i.length;o++)try{await chrome.tabs.remove(i[o])}catch(n){console.error("Tab removing error:",n)}await chrome.storage.local.set({imports:[]})}}});
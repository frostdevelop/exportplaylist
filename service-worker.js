"use strict";async function sendMessageToActiveTab(t){let[a]=await chrome.tabs.query({active:!0,lastFocusedWindow:!0}),e=await chrome.tabs.sendMessage(a.id,t);return e}async function startimport(t,a){let e=chrome.tabs.create({url:t[1]});function s(e,r,o){if(e==o.id&&"complete"==r.status&&o.url===t[1]){chrome.tabs.sendMessage(o.id,{type:"startimport",data:{name:a,arr:t}}),chrome.tabs.onUpdated.removeListener(s);return}}console.log(t),chrome.tabs.onUpdated.addListener(s);let r=await chrome.storage.local.get(["imports"]);void 0==(r=r.imports)?await chrome.storage.local.set({imports:[e.id]}):await chrome.storage.local.set({imports:[...r,e.id]})}chrome.tabs.onUpdated.addListener((t,a,e)=>{}),chrome.runtime.onInstall.addListener(()=>{chrome.tabs.create({url:"onboarding.html"})}),chrome.runtime.setUninstallURL("https://github.com/frostdevelop/exportplaylist/"),chrome.tabs.onRemoved.addListener(async t=>{let a=await chrome.storage.local.get(["imports"]);a=a.imports;let e=a.indexOf(t);-1!=e&&(a.splice(e,1),await chrome.storage.local.set({imports:a}))}),chrome.runtime.onMessage.addListener(async(t,a,e)=>{let{type:s,data:r}=t;if(console.log(s),"startimport"===s&&(startimport(r.arr,r.name),console.log("Starting import")),"importdone"===s&&(await chrome.tabs.remove(a.tab.id),console.log("Import finished",r.name)),"stopimport"===s){let o=await chrome.storage.local.get(["imports"]);if(o=o.imports,console.log(o),void 0!=o){for(let i=0;i<o.length;i++)try{await chrome.tabs.remove(o[i])}catch(n){console.error("Tab removing error:",n)}await chrome.storage.local.set({imports:[]})}}});